/**
 * MVOLA-Merchant-Pay-API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../org.wso2.client.model.MVOLA-Merchant-Pay-API/InlineObject';

/**
* Default service.
* @module org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rootPost operation.
     * @callback module:org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi~rootPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merchant pay
     * @param {String} version 
     * @param {String} xCorrelationID 
     * @param {String} cacheControl 
     * @param {module:org.wso2.client.model.MVOLA-Merchant-Pay-API/InlineObject} inlineObject 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cellIdA 
     * @param {String} opts.geoLocationA 
     * @param {String} opts.cellIdB 
     * @param {String} opts.geoLocationB 
     * @param {String} opts.accept 
     * @param {String} opts.acceptCharset 
     * @param {String} opts.xCallbackURL 
     * @param {module:org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi~rootPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rootPost(version, xCorrelationID, cacheControl, inlineObject, opts, callback) {
      opts = opts || {};
      let postBody = inlineObject;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling rootPost");
      }
      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling rootPost");
      }
      // verify the required parameter 'cacheControl' is set
      if (cacheControl === undefined || cacheControl === null) {
        throw new Error("Missing the required parameter 'cacheControl' when calling rootPost");
      }
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling rootPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Version': version,
        'CellIdA': opts['cellIdA'],
        'GeoLocationA': opts['geoLocationA'],
        'CellIdB': opts['cellIdB'],
        'GeoLocationB': opts['geoLocationB'],
        'Accept': opts['accept'],
        'Accept-Charset': opts['acceptCharset'],
        'X-CorrelationID': xCorrelationID,
        'X-Callback-URL': opts['xCallbackURL'],
        'Cache-Control': cacheControl
      };
      let formParams = {
      };

      let authNames = ['default'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusServerCorrelationIdGet operation.
     * @callback module:org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi~statusServerCorrelationIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transaction status
     * @param {String} serverCorrelationId 
     * @param {String} version 
     * @param {String} xCorrelationID 
     * @param {String} userAccountIdentifier 
     * @param {String} partnerName 
     * @param {String} cacheControl 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cellIdA 
     * @param {String} opts.geoLocationA 
     * @param {String} opts.accept 
     * @param {String} opts.acceptCharset 
     * @param {module:org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi~statusServerCorrelationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusServerCorrelationIdGet(serverCorrelationId, version, xCorrelationID, userAccountIdentifier, partnerName, cacheControl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverCorrelationId' is set
      if (serverCorrelationId === undefined || serverCorrelationId === null) {
        throw new Error("Missing the required parameter 'serverCorrelationId' when calling statusServerCorrelationIdGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling statusServerCorrelationIdGet");
      }
      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling statusServerCorrelationIdGet");
      }
      // verify the required parameter 'userAccountIdentifier' is set
      if (userAccountIdentifier === undefined || userAccountIdentifier === null) {
        throw new Error("Missing the required parameter 'userAccountIdentifier' when calling statusServerCorrelationIdGet");
      }
      // verify the required parameter 'partnerName' is set
      if (partnerName === undefined || partnerName === null) {
        throw new Error("Missing the required parameter 'partnerName' when calling statusServerCorrelationIdGet");
      }
      // verify the required parameter 'cacheControl' is set
      if (cacheControl === undefined || cacheControl === null) {
        throw new Error("Missing the required parameter 'cacheControl' when calling statusServerCorrelationIdGet");
      }

      let pathParams = {
        'serverCorrelationId': serverCorrelationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Version': version,
        'CellIdA': opts['cellIdA'],
        'GeoLocationA': opts['geoLocationA'],
        'Accept': opts['accept'],
        'Accept-Charset': opts['acceptCharset'],
        'X-CorrelationID': xCorrelationID,
        'UserAccountIdentifier': userAccountIdentifier,
        'partnerName': partnerName,
        'Cache-Control': cacheControl
      };
      let formParams = {
      };

      let authNames = ['default'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/status/{serverCorrelationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionReferenceGet operation.
     * @callback module:org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi~transactionReferenceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transaction details
     * @param {String} transactionReference 
     * @param {String} version 
     * @param {String} xCorrelationID 
     * @param {String} userAccountIdentifier 
     * @param {String} cacheControl 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cellIdA 
     * @param {String} opts.geoLocationA 
     * @param {String} opts.accept 
     * @param {String} opts.acceptCharset 
     * @param {module:org.wso2.client.api.MVOLA-Merchant-Pay-API/DefaultApi~transactionReferenceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionReferenceGet(transactionReference, version, xCorrelationID, userAccountIdentifier, cacheControl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transactionReference' is set
      if (transactionReference === undefined || transactionReference === null) {
        throw new Error("Missing the required parameter 'transactionReference' when calling transactionReferenceGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling transactionReferenceGet");
      }
      // verify the required parameter 'xCorrelationID' is set
      if (xCorrelationID === undefined || xCorrelationID === null) {
        throw new Error("Missing the required parameter 'xCorrelationID' when calling transactionReferenceGet");
      }
      // verify the required parameter 'userAccountIdentifier' is set
      if (userAccountIdentifier === undefined || userAccountIdentifier === null) {
        throw new Error("Missing the required parameter 'userAccountIdentifier' when calling transactionReferenceGet");
      }
      // verify the required parameter 'cacheControl' is set
      if (cacheControl === undefined || cacheControl === null) {
        throw new Error("Missing the required parameter 'cacheControl' when calling transactionReferenceGet");
      }

      let pathParams = {
        'transactionReference': transactionReference
      };
      let queryParams = {
      };
      let headerParams = {
        'Version': version,
        'CellIdA': opts['cellIdA'],
        'GeoLocationA': opts['geoLocationA'],
        'Accept': opts['accept'],
        'Accept-Charset': opts['acceptCharset'],
        'X-CorrelationID': xCorrelationID,
        'UserAccountIdentifier': userAccountIdentifier,
        'Cache-Control': cacheControl
      };
      let formParams = {
      };

      let authNames = ['default'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{transactionReference}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
